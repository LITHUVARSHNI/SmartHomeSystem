// Component
interface Text {
    String getContent();
}

// Concrete Component
class PlainText implements Text {
    private String content;

    public PlainText(String content) {
        this.content = content;
    }

    public String getContent() {
        return content;
    }
}

// Decorator
abstract class TextDecorator implements Text {
    protected Text decoratedText;

    public TextDecorator(Text decoratedText) {
        this.decoratedText = decoratedText;
    }

    public String getContent() {
        return decoratedText.getContent();
    }
}

// Concrete Decorator
class BoldText extends TextDecorator {
    public BoldText(Text decoratedText) {
        super(decoratedText);
    }

    public String getContent() {
        return "<b>" + super.getContent() + "</b>";
    }
}

// Concrete Decorator
class ItalicText extends TextDecorator {
    public ItalicText(Text decoratedText) {
        super(decoratedText);
    }

    public String getContent() {
        return "<i>" + super.getContent() + "</i>";
    }
}

public class DecoratorPatternExample {
    public static void main(String[] args) {
        Text text = new PlainText("Hello, World!");

        Text boldText = new BoldText(text);
        Text italicText = new ItalicText(text);
        Text boldItalicText = new BoldText(new ItalicText(text));

        System.out.println(text.getContent());
        System.out.println(boldText.getContent());
        System.out.println(italicText.getContent());
        System.out.println(boldItalicText.getContent());
    }
}
